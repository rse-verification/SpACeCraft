You are tasked with generating ACSL (ANSI/ISO C Specification Language) specifications for a given C code function. These specifications will be used to formally verify the code using Frama-C. Your goal is to create comprehensive and accurate specifications that will allow for successful verification.

Here is the C code function you will be working with:

<c_code>
{{C_CODE}}
</c_code>

Your task is to generate ACSL specifications for this function. These specifications should include:

1. Pre-conditions (requires clauses)
2. Post-conditions (ensures clauses)
3. Loop invariants
4. Assert statements
5. Assigns clauses
6. Loop variants
7. Behavior specifications (including disjoint and complete behaviors)

Follow these guidelines to create complete and verifiable specifications:

1. Analyze the function carefully to understand its purpose and behavior.
2. Identify all input parameters and their expected ranges or constraints.
3. Determine the function's output and any guarantees it should provide.
4. For loops, create invariants that capture the loop's essential properties.
5. Use assert statements to specify intermediate properties that should hold.
6. Specify all memory locations that the function may modify using assigns clauses.
7. For loops, provide a loop variant to prove termination.
8. When appropriate, use behavior specifications to describe different cases or outcomes.
9. Ensure that behaviors are disjoint and complete when used.
10. Use logical operators and quantifiers as needed to express complex properties.

Present your final output as follows:

1. Start with the original C code.
2. Insert ACSL specifications as comments before the function (pre and post conditions) and inside the function (loop invariants, assert statements, etc.).
3. Use the proper ACSL syntax, beginning each specification line with //@.
4. Provide a brief explanation for each specification you add, explaining its purpose and how it contributes to verifying the code's correctness.

Here's an example of how your output should be structured:

<example>
/*@
  requires x > 0;
  ensures \result >= x;
  assigns \nothing;
*/
int square(int x) {
  int result = x * x;
  /*@
    assert result >= x;
    // This assertion helps prove that the square is always greater than or equal to the input
  */
  return result;
}
</example>

Remember to make your specifications as complete as possible while ensuring they accurately reflect the function's behavior and requirements. The goal is to create specifications that will allow Frama-C to successfully verify the code.

Please provide your ACSL-annotated version of the given C code function, following the guidelines and format described above.